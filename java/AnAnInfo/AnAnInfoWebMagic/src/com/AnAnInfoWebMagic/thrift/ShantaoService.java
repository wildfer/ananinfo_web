/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.AnAnInfoWebMagic.thrift;

import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-6-9")
public class ShantaoService {

  public interface Iface {

    public ParamsOut ShantaoCallJson(ParamsIn strJsonIn) throws TException;

    public ParamsOut ShantaoCalltest(ParamsIn strJsonIn) throws TException;

  }

  public interface AsyncIface {

    public void ShantaoCallJson(ParamsIn strJsonIn, AsyncMethodCallback resultHandler) throws TException;

    public void ShantaoCalltest(ParamsIn strJsonIn, AsyncMethodCallback resultHandler) throws TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public ParamsOut ShantaoCallJson(ParamsIn strJsonIn) throws TException
    {
      send_ShantaoCallJson(strJsonIn);
      return recv_ShantaoCallJson();
    }

    public void send_ShantaoCallJson(ParamsIn strJsonIn) throws TException
    {
      ShantaoCallJson_args args = new ShantaoCallJson_args();
      args.setStrJsonIn(strJsonIn);
      sendBase("ShantaoCallJson", args);
    }

    public ParamsOut recv_ShantaoCallJson() throws TException
    {
      ShantaoCallJson_result result = new ShantaoCallJson_result();
      receiveBase(result, "ShantaoCallJson");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ShantaoCallJson failed: unknown result");
    }

    public ParamsOut ShantaoCalltest(ParamsIn strJsonIn) throws TException
    {
      send_ShantaoCalltest(strJsonIn);
      return recv_ShantaoCalltest();
    }

    public void send_ShantaoCalltest(ParamsIn strJsonIn) throws TException
    {
      ShantaoCalltest_args args = new ShantaoCalltest_args();
      args.setStrJsonIn(strJsonIn);
      sendBase("ShantaoCalltest", args);
    }

    public ParamsOut recv_ShantaoCalltest() throws TException
    {
      ShantaoCalltest_result result = new ShantaoCalltest_result();
      receiveBase(result, "ShantaoCalltest");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ShantaoCalltest failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ShantaoCallJson(ParamsIn strJsonIn, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      ShantaoCallJson_call method_call = new ShantaoCallJson_call(strJsonIn, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ShantaoCallJson_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ParamsIn strJsonIn;
      public ShantaoCallJson_call(ParamsIn strJsonIn, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strJsonIn = strJsonIn;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ShantaoCallJson", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ShantaoCallJson_args args = new ShantaoCallJson_args();
        args.setStrJsonIn(strJsonIn);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ParamsOut getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ShantaoCallJson();
      }
    }

    public void ShantaoCalltest(ParamsIn strJsonIn, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      ShantaoCalltest_call method_call = new ShantaoCalltest_call(strJsonIn, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ShantaoCalltest_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ParamsIn strJsonIn;
      public ShantaoCalltest_call(ParamsIn strJsonIn, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strJsonIn = strJsonIn;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ShantaoCalltest", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ShantaoCalltest_args args = new ShantaoCalltest_args();
        args.setStrJsonIn(strJsonIn);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ParamsOut getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ShantaoCalltest();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ShantaoCallJson", new ShantaoCallJson());
      processMap.put("ShantaoCalltest", new ShantaoCalltest());
      return processMap;
    }

    public static class ShantaoCallJson<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ShantaoCallJson_args> {
      public ShantaoCallJson() {
        super("ShantaoCallJson");
      }

      public ShantaoCallJson_args getEmptyArgsInstance() {
        return new ShantaoCallJson_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ShantaoCallJson_result getResult(I iface, ShantaoCallJson_args args) throws TException {
        ShantaoCallJson_result result = new ShantaoCallJson_result();
        result.success = iface.ShantaoCallJson(args.strJsonIn);
        return result;
      }
    }

    public static class ShantaoCalltest<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ShantaoCalltest_args> {
      public ShantaoCalltest() {
        super("ShantaoCalltest");
      }

      public ShantaoCalltest_args getEmptyArgsInstance() {
        return new ShantaoCalltest_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ShantaoCalltest_result getResult(I iface, ShantaoCalltest_args args) throws TException {
        ShantaoCalltest_result result = new ShantaoCalltest_result();
        result.success = iface.ShantaoCalltest(args.strJsonIn);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("ShantaoCallJson", new ShantaoCallJson());
      processMap.put("ShantaoCalltest", new ShantaoCalltest());
      return processMap;
    }

    public static class ShantaoCallJson<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ShantaoCallJson_args, ParamsOut> {
      public ShantaoCallJson() {
        super("ShantaoCallJson");
      }

      public ShantaoCallJson_args getEmptyArgsInstance() {
        return new ShantaoCallJson_args();
      }

      public AsyncMethodCallback<ParamsOut> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ParamsOut>() {
          public void onComplete(ParamsOut o) {
            ShantaoCallJson_result result = new ShantaoCallJson_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ShantaoCallJson_result result = new ShantaoCallJson_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ShantaoCallJson_args args, AsyncMethodCallback<ParamsOut> resultHandler) throws TException {
        iface.ShantaoCallJson(args.strJsonIn,resultHandler);
      }
    }

    public static class ShantaoCalltest<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ShantaoCalltest_args, ParamsOut> {
      public ShantaoCalltest() {
        super("ShantaoCalltest");
      }

      public ShantaoCalltest_args getEmptyArgsInstance() {
        return new ShantaoCalltest_args();
      }

      public AsyncMethodCallback<ParamsOut> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ParamsOut>() {
          public void onComplete(ParamsOut o) {
            ShantaoCalltest_result result = new ShantaoCalltest_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ShantaoCalltest_result result = new ShantaoCalltest_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ShantaoCalltest_args args, AsyncMethodCallback<ParamsOut> resultHandler) throws TException {
        iface.ShantaoCalltest(args.strJsonIn,resultHandler);
      }
    }

  }

  public static class ShantaoCallJson_args implements org.apache.thrift.TBase<ShantaoCallJson_args, ShantaoCallJson_args._Fields>, java.io.Serializable, Cloneable, Comparable<ShantaoCallJson_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ShantaoCallJson_args");

    private static final org.apache.thrift.protocol.TField STR_JSON_IN_FIELD_DESC = new org.apache.thrift.protocol.TField("strJsonIn", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ShantaoCallJson_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ShantaoCallJson_argsTupleSchemeFactory());
    }

    public ParamsIn strJsonIn; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STR_JSON_IN((short)1, "strJsonIn");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STR_JSON_IN
            return STR_JSON_IN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STR_JSON_IN, new org.apache.thrift.meta_data.FieldMetaData("strJsonIn", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ParamsIn.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ShantaoCallJson_args.class, metaDataMap);
    }

    public ShantaoCallJson_args() {
    }

    public ShantaoCallJson_args(
      ParamsIn strJsonIn)
    {
      this();
      this.strJsonIn = strJsonIn;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ShantaoCallJson_args(ShantaoCallJson_args other) {
      if (other.isSetStrJsonIn()) {
        this.strJsonIn = new ParamsIn(other.strJsonIn);
      }
    }

    public ShantaoCallJson_args deepCopy() {
      return new ShantaoCallJson_args(this);
    }

    @Override
    public void clear() {
      this.strJsonIn = null;
    }

    public ParamsIn getStrJsonIn() {
      return this.strJsonIn;
    }

    public ShantaoCallJson_args setStrJsonIn(ParamsIn strJsonIn) {
      this.strJsonIn = strJsonIn;
      return this;
    }

    public void unsetStrJsonIn() {
      this.strJsonIn = null;
    }

    /** Returns true if field strJsonIn is set (has been assigned a value) and false otherwise */
    public boolean isSetStrJsonIn() {
      return this.strJsonIn != null;
    }

    public void setStrJsonInIsSet(boolean value) {
      if (!value) {
        this.strJsonIn = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STR_JSON_IN:
        if (value == null) {
          unsetStrJsonIn();
        } else {
          setStrJsonIn((ParamsIn)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STR_JSON_IN:
        return getStrJsonIn();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STR_JSON_IN:
        return isSetStrJsonIn();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ShantaoCallJson_args)
        return this.equals((ShantaoCallJson_args)that);
      return false;
    }

    public boolean equals(ShantaoCallJson_args that) {
      if (that == null)
        return false;

      boolean this_present_strJsonIn = true && this.isSetStrJsonIn();
      boolean that_present_strJsonIn = true && that.isSetStrJsonIn();
      if (this_present_strJsonIn || that_present_strJsonIn) {
        if (!(this_present_strJsonIn && that_present_strJsonIn))
          return false;
        if (!this.strJsonIn.equals(that.strJsonIn))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strJsonIn = true && (isSetStrJsonIn());
      list.add(present_strJsonIn);
      if (present_strJsonIn)
        list.add(strJsonIn);

      return list.hashCode();
    }

    @Override
    public int compareTo(ShantaoCallJson_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrJsonIn()).compareTo(other.isSetStrJsonIn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrJsonIn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strJsonIn, other.strJsonIn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ShantaoCallJson_args(");
      boolean first = true;

      sb.append("strJsonIn:");
      if (this.strJsonIn == null) {
        sb.append("null");
      } else {
        sb.append(this.strJsonIn);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (strJsonIn != null) {
        strJsonIn.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ShantaoCallJson_argsStandardSchemeFactory implements SchemeFactory {
      public ShantaoCallJson_argsStandardScheme getScheme() {
        return new ShantaoCallJson_argsStandardScheme();
      }
    }

    private static class ShantaoCallJson_argsStandardScheme extends StandardScheme<ShantaoCallJson_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ShantaoCallJson_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // STR_JSON_IN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.strJsonIn = new ParamsIn();
                struct.strJsonIn.read(iprot);
                struct.setStrJsonInIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ShantaoCallJson_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.strJsonIn != null) {
          oprot.writeFieldBegin(STR_JSON_IN_FIELD_DESC);
          struct.strJsonIn.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ShantaoCallJson_argsTupleSchemeFactory implements SchemeFactory {
      public ShantaoCallJson_argsTupleScheme getScheme() {
        return new ShantaoCallJson_argsTupleScheme();
      }
    }

    private static class ShantaoCallJson_argsTupleScheme extends TupleScheme<ShantaoCallJson_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ShantaoCallJson_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrJsonIn()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStrJsonIn()) {
          struct.strJsonIn.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ShantaoCallJson_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.strJsonIn = new ParamsIn();
          struct.strJsonIn.read(iprot);
          struct.setStrJsonInIsSet(true);
        }
      }
    }

  }

  public static class ShantaoCallJson_result implements org.apache.thrift.TBase<ShantaoCallJson_result, ShantaoCallJson_result._Fields>, java.io.Serializable, Cloneable, Comparable<ShantaoCallJson_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ShantaoCallJson_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ShantaoCallJson_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ShantaoCallJson_resultTupleSchemeFactory());
    }

    public ParamsOut success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ParamsOut.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ShantaoCallJson_result.class, metaDataMap);
    }

    public ShantaoCallJson_result() {
    }

    public ShantaoCallJson_result(
      ParamsOut success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ShantaoCallJson_result(ShantaoCallJson_result other) {
      if (other.isSetSuccess()) {
        this.success = new ParamsOut(other.success);
      }
    }

    public ShantaoCallJson_result deepCopy() {
      return new ShantaoCallJson_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ParamsOut getSuccess() {
      return this.success;
    }

    public ShantaoCallJson_result setSuccess(ParamsOut success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ParamsOut)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ShantaoCallJson_result)
        return this.equals((ShantaoCallJson_result)that);
      return false;
    }

    public boolean equals(ShantaoCallJson_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(ShantaoCallJson_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ShantaoCallJson_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ShantaoCallJson_resultStandardSchemeFactory implements SchemeFactory {
      public ShantaoCallJson_resultStandardScheme getScheme() {
        return new ShantaoCallJson_resultStandardScheme();
      }
    }

    private static class ShantaoCallJson_resultStandardScheme extends StandardScheme<ShantaoCallJson_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ShantaoCallJson_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ParamsOut();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ShantaoCallJson_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ShantaoCallJson_resultTupleSchemeFactory implements SchemeFactory {
      public ShantaoCallJson_resultTupleScheme getScheme() {
        return new ShantaoCallJson_resultTupleScheme();
      }
    }

    private static class ShantaoCallJson_resultTupleScheme extends TupleScheme<ShantaoCallJson_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ShantaoCallJson_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ShantaoCallJson_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ParamsOut();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class ShantaoCalltest_args implements org.apache.thrift.TBase<ShantaoCalltest_args, ShantaoCalltest_args._Fields>, java.io.Serializable, Cloneable, Comparable<ShantaoCalltest_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ShantaoCalltest_args");

    private static final org.apache.thrift.protocol.TField STR_JSON_IN_FIELD_DESC = new org.apache.thrift.protocol.TField("strJsonIn", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ShantaoCalltest_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ShantaoCalltest_argsTupleSchemeFactory());
    }

    public ParamsIn strJsonIn; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STR_JSON_IN((short)1, "strJsonIn");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STR_JSON_IN
            return STR_JSON_IN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STR_JSON_IN, new org.apache.thrift.meta_data.FieldMetaData("strJsonIn", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ParamsIn.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ShantaoCalltest_args.class, metaDataMap);
    }

    public ShantaoCalltest_args() {
    }

    public ShantaoCalltest_args(
      ParamsIn strJsonIn)
    {
      this();
      this.strJsonIn = strJsonIn;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ShantaoCalltest_args(ShantaoCalltest_args other) {
      if (other.isSetStrJsonIn()) {
        this.strJsonIn = new ParamsIn(other.strJsonIn);
      }
    }

    public ShantaoCalltest_args deepCopy() {
      return new ShantaoCalltest_args(this);
    }

    @Override
    public void clear() {
      this.strJsonIn = null;
    }

    public ParamsIn getStrJsonIn() {
      return this.strJsonIn;
    }

    public ShantaoCalltest_args setStrJsonIn(ParamsIn strJsonIn) {
      this.strJsonIn = strJsonIn;
      return this;
    }

    public void unsetStrJsonIn() {
      this.strJsonIn = null;
    }

    /** Returns true if field strJsonIn is set (has been assigned a value) and false otherwise */
    public boolean isSetStrJsonIn() {
      return this.strJsonIn != null;
    }

    public void setStrJsonInIsSet(boolean value) {
      if (!value) {
        this.strJsonIn = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STR_JSON_IN:
        if (value == null) {
          unsetStrJsonIn();
        } else {
          setStrJsonIn((ParamsIn)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STR_JSON_IN:
        return getStrJsonIn();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STR_JSON_IN:
        return isSetStrJsonIn();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ShantaoCalltest_args)
        return this.equals((ShantaoCalltest_args)that);
      return false;
    }

    public boolean equals(ShantaoCalltest_args that) {
      if (that == null)
        return false;

      boolean this_present_strJsonIn = true && this.isSetStrJsonIn();
      boolean that_present_strJsonIn = true && that.isSetStrJsonIn();
      if (this_present_strJsonIn || that_present_strJsonIn) {
        if (!(this_present_strJsonIn && that_present_strJsonIn))
          return false;
        if (!this.strJsonIn.equals(that.strJsonIn))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_strJsonIn = true && (isSetStrJsonIn());
      list.add(present_strJsonIn);
      if (present_strJsonIn)
        list.add(strJsonIn);

      return list.hashCode();
    }

    @Override
    public int compareTo(ShantaoCalltest_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStrJsonIn()).compareTo(other.isSetStrJsonIn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrJsonIn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strJsonIn, other.strJsonIn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ShantaoCalltest_args(");
      boolean first = true;

      sb.append("strJsonIn:");
      if (this.strJsonIn == null) {
        sb.append("null");
      } else {
        sb.append(this.strJsonIn);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (strJsonIn != null) {
        strJsonIn.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ShantaoCalltest_argsStandardSchemeFactory implements SchemeFactory {
      public ShantaoCalltest_argsStandardScheme getScheme() {
        return new ShantaoCalltest_argsStandardScheme();
      }
    }

    private static class ShantaoCalltest_argsStandardScheme extends StandardScheme<ShantaoCalltest_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ShantaoCalltest_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // STR_JSON_IN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.strJsonIn = new ParamsIn();
                struct.strJsonIn.read(iprot);
                struct.setStrJsonInIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ShantaoCalltest_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.strJsonIn != null) {
          oprot.writeFieldBegin(STR_JSON_IN_FIELD_DESC);
          struct.strJsonIn.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ShantaoCalltest_argsTupleSchemeFactory implements SchemeFactory {
      public ShantaoCalltest_argsTupleScheme getScheme() {
        return new ShantaoCalltest_argsTupleScheme();
      }
    }

    private static class ShantaoCalltest_argsTupleScheme extends TupleScheme<ShantaoCalltest_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ShantaoCalltest_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStrJsonIn()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStrJsonIn()) {
          struct.strJsonIn.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ShantaoCalltest_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.strJsonIn = new ParamsIn();
          struct.strJsonIn.read(iprot);
          struct.setStrJsonInIsSet(true);
        }
      }
    }

  }

  public static class ShantaoCalltest_result implements org.apache.thrift.TBase<ShantaoCalltest_result, ShantaoCalltest_result._Fields>, java.io.Serializable, Cloneable, Comparable<ShantaoCalltest_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ShantaoCalltest_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ShantaoCalltest_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ShantaoCalltest_resultTupleSchemeFactory());
    }

    public ParamsOut success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ParamsOut.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ShantaoCalltest_result.class, metaDataMap);
    }

    public ShantaoCalltest_result() {
    }

    public ShantaoCalltest_result(
      ParamsOut success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ShantaoCalltest_result(ShantaoCalltest_result other) {
      if (other.isSetSuccess()) {
        this.success = new ParamsOut(other.success);
      }
    }

    public ShantaoCalltest_result deepCopy() {
      return new ShantaoCalltest_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ParamsOut getSuccess() {
      return this.success;
    }

    public ShantaoCalltest_result setSuccess(ParamsOut success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ParamsOut)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ShantaoCalltest_result)
        return this.equals((ShantaoCalltest_result)that);
      return false;
    }

    public boolean equals(ShantaoCalltest_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(ShantaoCalltest_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ShantaoCalltest_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ShantaoCalltest_resultStandardSchemeFactory implements SchemeFactory {
      public ShantaoCalltest_resultStandardScheme getScheme() {
        return new ShantaoCalltest_resultStandardScheme();
      }
    }

    private static class ShantaoCalltest_resultStandardScheme extends StandardScheme<ShantaoCalltest_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ShantaoCalltest_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ParamsOut();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ShantaoCalltest_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ShantaoCalltest_resultTupleSchemeFactory implements SchemeFactory {
      public ShantaoCalltest_resultTupleScheme getScheme() {
        return new ShantaoCalltest_resultTupleScheme();
      }
    }

    private static class ShantaoCalltest_resultTupleScheme extends TupleScheme<ShantaoCalltest_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ShantaoCalltest_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ShantaoCalltest_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ParamsOut();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
